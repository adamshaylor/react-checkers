{"version":3,"sources":["features/game/Piece.tsx","app/hooks.ts","features/game/constants.ts","features/game/utilities.ts","features/game/gameSlice.ts","features/game/Game.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/game/Game.module.css","features/game/Piece.module.css"],"names":["svgLookup","red","man","xmlns","className","styles","piece","viewBox","d","transform","fill","stroke","strokeMiterlimit","cx","cy","rx","ry","king","white","Piece","props","color","rank","useAppSelector","useSelector","rm","wm","directions","evenRowPlayingSquareOffsets","nw","ne","se","sw","oddRowPlayingSquareOffsets","playingSquareIndexIsInEvenRow","index","Math","floor","getAdjacentPlayingSquareIndex","originIndex","direction","playingSquaresPerRow","isInEvenRow","directionIsInBounds","getJumpPlayingSquareIndex","adjacentIndex","getLastPlayerAction","gameState","playerActions","slice","getPiecePlayingSquareIndicesForColor","playingSquaresState","reduce","indices","playingSquare","playingSquareIndex","concat","isJustAMove","move","to","getMaybeSimpleMove","from","getAllLegalSimpleMoves","potentials","map","filter","getPotentialSimpleMoves","isMoveLegal","getAllLegalJumpMoves","getPotentialJumpMoves","getMaybeJumpMove","getMoveTypeAndDirection","simpleMoveDirection","find","type","jumpMoveDirection","pieceAtOrigin","pieceAtDestination","moveTypeAndDirection","directionIsForward","jumpedIndex","jumpedPiece","indexIsInKingsRow","maxPlayingSquareIndex","playingSquaresCount","physicalLocationToPlayingSquareIndex","physical","rowIsEven","rowIndex","columnIsEven","columnIndex","createSimpleMoveAction","validate","Error","resultantPlayingSquaresState","opponentColor","remainingOpponentMoves","opponentHasNoRemainingMoves","length","resultantWinner","endsTurn","endsGame","createJumpMoveAction","isPromotion","nextJumpsForPiece","nextJump","initialState","initialPlayingSquaresState","selectedPlayingSquareIndex","gameSlice","createSlice","name","reducers","makeMove","action","payload","lastPlayerAction","getCurrentPlayingSquaresState","playerAction","selectPhysicalSquare","selectGameState","state","game","selectLastPlayerAction","selectSelectedPhysicalLocation","playingSquareIndexToPhysicalLocation","selectWhoseTurn","createSelector","selectCurrentPlayingSquaresState","selectCurrentValidMoveActions","_","playerColor","count","whoseTurn","lastMoveAction","isStartOfMultiJump","legalJumpMoveActions","selectCurrentPhysicalBoardState","Array","physicalRowIndex","physicalColumnIndex","actions","Game","boardRows","selectedPhysicalSquare","validMoveActions","dispatch","useDispatch","getSquareClassName","square","location","isSelected","variantStyle","gameSquareSelected","gameSquarePlaying","gameSquareNonPlaying","classNames","gameSquare","row","onClick","isAlreadySelected","newSelectedSquare","isPieceOfCurrentPlayer","clickedPlayingSquareIndex","validMoveAction","validMove","onSquareClick","squareIndex","join","App","store","configureStore","reducer","gameReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4PAkBMA,EAAuB,CAC3BC,IAAK,CACHC,IARW,sBAAKC,MAAM,6BAA6BC,UAAWC,IAAOC,MAAOC,QAAQ,eAAzE,UAAwF,sBAAMC,EAAE,yEAAyEC,UAAU,wBAAwBC,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,OAAOC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,UASjWK,KARY,sBAAKd,MAAM,6BAA8BC,UAAWC,IAAOC,MAAOC,QAAQ,kBAA1E,UAA4F,sBAAMC,EAAE,yEAAyEC,UAAU,2BAA2BC,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,QAAQC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,OAAM,sBAAMJ,EAAE,+EAA+EC,UAAU,2BAA2BC,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,OAAOC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,WAUznBM,MAAO,CACLhB,IAVa,sBAAKC,MAAM,6BAA8BC,UAAWC,IAAOC,MAAOC,QAAQ,eAA1E,UAAyF,sBAAMC,EAAE,yEAAyEC,UAAU,wBAAwBC,KAAK,OAAOC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,OAAOC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,OAAOC,OAAO,OAAOC,iBAAiB,UAWtWK,KAVc,sBAAKd,MAAM,6BAA8BC,UAAWC,IAAOC,MAAOC,QAAQ,kBAA1E,UAA4F,sBAAMC,EAAE,yEAAyEC,UAAU,2BAA2BC,KAAK,OAAOC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,QAAQC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,MAAMC,OAAO,OAAOC,iBAAiB,OAAM,sBAAMJ,EAAE,+EAA+EC,UAAU,2BAA2BC,KAAK,OAAOC,OAAO,OAAOC,iBAAiB,OAAM,yBAASC,GAAG,OAAOC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQN,KAAK,OAAOC,OAAO,OAAOC,iBAAiB,YAcjnB,SAASO,EAAMC,GAC5B,OAAOpB,EAAUoB,EAAMC,OAAOD,EAAME,M,2BCzBzBC,EAAkDC,I,4BCOlDvB,EAAa,MACbiB,EAAe,QACfhB,EAAY,MAEZuB,EAAY,CAAEJ,MAAOpB,EAAKqB,KAAMpB,GAChCwB,EAAY,CAAEL,MAAOH,EAAOI,KAAMpB,GAMlCyB,EAAa,CAJG,KACA,KACA,KACA,MAMhBC,EAAyD,CACpEC,IAAK,EACLC,IAAK,EACLC,GAAI,EACJC,GAAI,GAGOC,EAAwD,CACnEJ,IAAK,EACLC,IAAK,EACLC,GAAI,EACJC,GAAI,GCROE,EAAgC,SAACC,GAE5C,OADiBC,KAAKC,MAAMF,EDzBM,GC0BhB,IAAM,GA+CbG,EAAgC,SAACC,EAAqBC,GACjE,OA7CiC,SAACD,EAAqBC,GAEvD,IAD8B,OAAdA,GAAoC,OAAdA,IAGpCD,EDjCgC,ECmChC,OAAO,EAIT,IAD8B,OAAdC,GAAoC,OAAdA,IAGpCD,GAAeE,GAEf,OAAO,EAGT,IAAMC,EAAcR,EAA8BK,GAGlD,SAD6B,OAAdC,GAAoC,OAAdA,GAGlCE,GACDH,EDpDgC,ICoDO,OAKZ,OAAdC,GAAoC,OAAdA,KAGnCE,IACCH,EAAc,GD7DiB,IC6Da,GAa1CI,CAAoBJ,EAAaC,GAG/BN,EAA8BK,GACjCA,EAAcX,EAA4BY,GAC1CD,EAAcN,EAA2BO,GAJpC,MAOEI,EAA4B,SAACL,EAAqBC,GAC7D,IAAMK,EAAgBP,EAA8BC,EAAaC,GACjE,OAAyB,OAAlBK,EACH,KACAP,EAA8BO,EAAeL,IAGtCM,EAAsB,SAACC,GAAD,OACjCA,EAAUC,cAAcC,OAAO,GAAG,IAAM,MAS7BC,EAAuC,SAACC,EAA0C9B,GAA3C,OAClD8B,EAAoBC,QAClB,SAACC,EAASC,EAAeC,GAAzB,OACED,GACAA,EAAcjC,QAAUA,EACpBgC,EAAQG,OAAOD,GACfF,IACN,KAGSI,EAAc,SAACC,GAAD,MACN,kBAAZA,EAAKC,IAEDC,EAAqB,SAACrB,EAAqBC,GAAtB,MAA2D,CAC3FqB,KAAMtB,EACNoB,GAAIrB,EAA8BC,EAAaC,KAQpCsB,EAAyB,SAACX,EAA0C9B,GAU/E,OAT6B6B,EAAqCC,EAAqB9B,GAC7B+B,QACxD,SAACW,EAAYxB,GAAb,OACEwB,EAAWP,OATsB,SAACjB,GAAD,OACrCZ,EACGqC,KAAI,SAAAxB,GAAS,OAAIoB,EAAmBrB,EAAaC,MACjDyB,OAAOR,GAMYS,CAAwB3B,MAC5C,IAE4C0B,QAAO,SAAAP,GAAI,OACvDS,EAAYhB,EAAqBO,OAKxBU,EAAuB,SAACjB,EAA0C9B,GAU7E,OAT6B6B,EAAqCC,EAAqB9B,GAC/B+B,QACtD,SAACW,EAAYxB,GAAb,OACEwB,EAAWP,OAAOa,EAAsB9B,MAC1C,IAEwC0B,QAAO,SAAAP,GAAI,OACnDS,EAAYhB,EAAqBO,OAKxBY,EAAmB,SAAC/B,EAAqBC,GAAtB,MAA2D,CACzFqB,KAAMtB,EACNoB,GAAIf,EAA0BL,EAAaC,KAGhC6B,EAAwB,SAAC9B,GAAD,OACnCZ,EACGqC,KAAI,SAAAxB,GAAS,OAAI8B,EAAiB/B,EAAaC,MAC/CyB,OAAOR,IAECc,EAA0B,SAACb,GACtC,IAAMc,EAAsB7C,EAAW8C,MAAK,SAAAjC,GAAS,OACnDoB,EAAmBF,EAAKG,KAAMrB,GAAWmB,KAAOD,EAAKC,MAEvD,GAAIa,EACF,MAAO,CACLhC,UAAWgC,EACXE,KAAM,eAGV,IAAMC,EAAoBhD,EAAW8C,MAAK,SAAAjC,GAAS,OACjD8B,EAAiBZ,EAAKG,KAAMrB,GAAWmB,KAAOD,EAAKC,MAErD,OAAIgB,EACK,CACLnC,UAAWmC,EACXD,KAAM,aAGH,MAQIP,EAAc,SAAChB,EAA0CO,GACpE,IAAMkB,EAAgBzB,EAAoBO,EAAKG,MACzCgB,EAAqB1B,EAAoBO,EAAKC,IAEpD,IAAKiB,GAAiBC,EACpB,OAAO,EAGT,IAAMC,EAAuBP,EAAwBb,GAErD,IAAKoB,EACH,OAAO,EAGT,IAAQJ,EAAoBI,EAApBJ,KAAMlC,EAAcsC,EAAdtC,UAEd,GACEoC,EAActD,OAASpB,IAtBO,SAACsC,EAAsBnB,GAAvB,OAChCA,IAAUpB,EDtKiB,OCuKvBuC,GDxKuB,OCwKHA,ED1KG,OC2KvBA,GD1KuB,OC0KHA,EAoBrBuC,CAAmBvC,EAAWoC,EAAcvD,OAE7C,OAAO,EAGT,GAAa,cAATqD,EAAsB,CACxB,IAAMM,EAAc1C,EAA8BoB,EAAKG,KAAMrB,GAC7D,IAAKwC,EACH,OAAO,EAET,IAAMC,EAAc9B,EAAoB6B,GACxC,IACGC,GACDA,EAAY5D,QAAUuD,EAAcvD,MAEpC,OAAO,EAIX,OAAO,GAGI6D,EAAoB,SAAC/C,EAAed,GAAhB,MACrB,QAAVA,EACI8D,GAA+ChD,GAC/CA,GDjO+BiD,GCkO/B,GAAKjD,GACLA,EDtO8B,GCwOvBkD,EAAuC,SAACC,GACnD,IAAMC,EAAYD,EAASE,SAAW,IAAM,EACtCC,EAAeH,EAASI,YAAc,IAAM,EAIlD,OAFGH,IAAcE,IACbF,GAAaE,GAIWF,GACvBD,EAASI,YAAc,GAAK,EAC7BJ,EAASI,YAAc,GDnPO,ECoPLJ,EAASE,SAL7B,MAqBEG,EAAyB,SACpCxC,EACAO,GAIwC,IADxCkC,IACuC,yDACjChB,EAAgBzB,EAAoBO,EAAKG,MAC/C,IACGe,GACCgB,IACCzB,EAAYhB,EAAqBO,GAGpC,MAAM,IAAImC,MAAM,gBAGlB,IAAMC,EAAiD,YAAQ3C,GAC/D2C,EAA6BpC,EAAKG,MAAQ,KAC1CiC,EAA6BpC,EAAKC,IAAMuB,EAAkBxB,EAAKC,GAAIiB,EAAcvD,OAAzC,2BAC/BuD,GAD+B,IAChBtD,KAAM,SAC1BsD,EAEJ,IAAMmB,EAA+C,QAAxBnB,EAAcvD,MACvC,QACA,MAEE2E,EAAsB,sBACvB5B,EAAqB0B,EAA8BC,IAD5B,YAEvBjC,EAAuBgC,EAA8BC,KAGpDE,EAAgE,IAAlCD,EAAuBE,OAErDC,EAAkBF,EACpBrB,EAAcvD,MACd,KAEJ,MAAO,CACLqD,KAAM,cACNrD,MAAOuD,EAAcvD,MACrBqC,OACAoC,+BAEAM,UAAU,EACVC,SAAUJ,EACVE,oBAISG,EAAuB,SAClCnD,EACAO,GAIsC,IADtCkC,IACqC,yDAC/BhB,EAAgBzB,EAAoBO,EAAKG,MACzCiB,EAAuBP,EAAwBb,GACrD,IACGkB,IACAE,GACCc,IACCzB,EAAYhB,EAAqBO,GAGpC,MAAM,IAAImC,MAAM,gBAGlB,IAAQrD,EAAcsC,EAAdtC,UACFwC,EAAc1C,EAA8BoB,EAAKG,KAAMrB,GACvDsD,EAAiD,YAAQ3C,GAC/D2C,EAA6BpC,EAAKG,MAAQ,KAE1C,IAAM0C,EAAcrB,EAAkBxB,EAAKC,GAAIiB,EAAcvD,OAC7DyE,EAA6BpC,EAAKC,IAAM4C,EAAW,2BAC1C3B,GAD0C,IAC3BtD,KAAM,SAC1BsD,EAEJkB,EAA6Bd,GAAe,KAC5C,IAAMwB,EAAoBpC,EAAqB0B,EAA8BlB,EAAcvD,OACxF4C,QAAO,SAAAwC,GAAQ,OAAIA,EAAS5C,OAASH,EAAKC,MAEvCyC,EAAWG,IAAgBC,EAAkBN,OAE7CH,EAA+C,QAAxBnB,EAAcvD,MACvC,QACA,MAEE2E,EAAsB,sBACvB5B,EAAqB0B,EAA8BC,IAD5B,YAEvBjC,EAAuBgC,EAA8BC,KAGpDE,EAAgE,IAAlCD,EAAuBE,OACrDG,EAAWD,GAAYH,EACvBE,EAAkBE,EACpBzB,EAAcvD,MACd,KAEJ,MAAO,CACLqD,KAAM,YACNrD,MAAOuD,EAAcvD,MACrBqC,OACAoC,+BACAM,WACAC,WACAF,oBCxUEO,EAA0B,CAC9BC,2BAA4B,CACxBlF,EAAIA,EAAIA,EAAIA,EACdA,EAAIA,EAAIA,EAAIA,EACVA,EAAIA,EAAIA,EAAIA,EACd,KAAM,KAAM,KAAM,KAChB,KAAM,KAAM,KAAM,KACpBC,EAAIA,EAAIA,EAAIA,EACVA,EAAIA,EAAIA,EAAIA,EACdA,EAAIA,EAAIA,EAAIA,GAEdsB,cAAe,GACf4D,2BAA4B,MAGjBC,EAAYC,YAAY,CACnCC,KAAM,OACNL,eACAM,SAAU,CACRC,SAAU,SAAClE,EAAsBmE,GAC/B,IAAMxD,EAAOwD,EAAOC,QACdrC,EAAuBP,EAAwBb,GAErD,IAAKoB,EACH,MAAM,IAAIe,MAAM,gBAIlB,IACM1C,EDwBiC,SAACJ,GAC5C,IAAMqE,EAAmBtE,EAAoBC,GAC7C,OAAOqE,EACHA,EAAiBtB,6BACjB/C,EAAU4D,2BC5BkBU,CAA8BtE,GACpDuE,EAF+B,cAEhBxC,EAAqBJ,KACtC4B,EAAqBnD,EAAqBO,GAC1CiC,EAAuBxC,EAAqBO,GAEhD,OAAO,2BACFX,GADL,IAEEC,cAAc,GAAD,mBACRD,EAAUC,eADF,CAEXsE,IAEFV,2BAA4B,QAGhCW,qBAzBQ,SAyBaxE,EAAsBmE,GACzC,OAAO,2BACFnE,GADL,IAEE6D,2BAA4BM,EAAOC,QAC/B9B,EAAqC6B,EAAOC,SAC5C,WAWCK,EAAkB,SAACC,GAAD,OAAiCA,EAAMC,MAEzDC,EAAyB,SAACF,GAAD,OACpC3E,EAAoB2E,EAAMC,OAafE,EAAiC,SAACH,GAAD,MACK,kBAA1CA,EAAMC,KAAKd,2BDoIgC,SAACrD,GACnD,OAlLA,IAD2CpB,EAmLToB,IAjLlCpB,GDpEmCiD,GC8P5B,CAAEI,SALQpD,KAAKC,MAAMkB,ED5PM,GCiQfmC,YAJCxD,EAA8BqB,GAC7CA,ED9P6B,EC8PgB,EAAI,EACjDA,ED/P6B,EC+PgB,GANzC,KApLiC,IAACpB,EC+CvC0F,CAAqCJ,EAAMC,KAAKd,4BAChD,MASOkB,GAPiBC,YAC5B,CAAEJ,IACF,SAAAP,GAAgB,QAAIA,GAChBA,EAAiBf,YAIQ0B,YAC7B,CAAEJ,IACF,SAAAP,GACE,OAAKA,EAGDA,EAAiBf,SACZ,KAELe,EAAiBhB,SACZgB,EAAiB/F,QAAUpB,EAC9BiB,EACAjB,EAECmH,EAAiB/F,MAVfpB,MAcA+H,EAAmCD,YAC9C,CAAEP,EAAiBG,IACnB,SAAC5E,EAAWqE,GAAZ,OAAiCA,EAC7BA,EAAiBtB,6BACjB/C,EAAU4D,8BAuBHsB,IApB6BF,YACxC,CAAEP,EAzC6B,SAACU,EAAcC,GAAf,OAC/BA,KAyCA,SAACpF,EAAWoF,GAAZ,OAA4BpF,EAAUC,cAAcI,QAClD,SAACgF,EAAOlB,GAAR,MACkB,cAAhBA,EAAOxC,MACPwC,EAAO7F,QAAU8G,EACbC,EAAQ,EACRA,IACN,MAI2CL,YAC7C,CAAEC,EAAkCF,IACpC,SAAC3E,EAAqBkF,GAAtB,OACEA,EACInF,EAAqCC,EAAqBkF,GAC1D,MAGqCN,YAC3C,CAAED,EArEsC,SAACL,GAKzC,OAJoBA,EAAMC,KAAK1E,cAAciB,QAAO,SAAAiD,GAAM,MACxC,gBAAhBA,EAAOxC,MACS,cAAhBwC,EAAOxC,QAEUzB,OAAO,GAAG,IAAM,MAgEY+E,IAC/C,SAACK,EAAWC,EAAgBnF,GAC1B,IAAKkF,EACH,MAAO,GAGT,IAAME,GACU,OAAdD,QAAc,IAAdA,OAAA,EAAAA,EAAgBjH,SAAUgH,GACD,eAAX,OAAdC,QAAc,IAAdA,OAAA,EAAAA,EAAgB5D,MAGZ8D,EADiBpE,EAAqBjB,EAAqBkF,GAE9DpE,QAAO,SAAAP,GAAI,aACV6E,GACkB,OAAdD,QAAc,IAAdA,GAAA,UAAAA,EAAgB5E,YAAhB,eAAsBC,MAAOD,EAAKG,KAClCH,KAELM,KAAI,SAAAN,GAAI,OACP4C,EAAqBnD,EAAqBO,GAAM,MAKpD,OAAI8E,EAAqBtC,OAChBsC,EAGgB1E,EAAuBX,EAAqBkF,GACrBrE,KAAI,SAAAN,GAAI,OACtDiC,EAAuBxC,EAAqBO,GAAM,UAO3C+E,GAAkCV,YAC7C,CAAEC,IACF,SAAC7E,GAYC,OAXiCuF,MAAM7E,KAAK,CAAEqC,OAAQzD,IAA4B,SAACyF,EAAGS,GAAJ,OAChFD,MAAM7E,KAAK,CAAEqC,OAAQzD,IAA4B,SAACyF,EAAGU,GACnD,IAAMrF,EAAqB8B,EAAqC,CAC9DG,SAAUmD,EACVjD,YAAakD,IAEf,OAA8B,OAAvBrF,EACH,CAAEA,qBAAoBjD,MAAO6C,EAAoBI,IACjD,cAOL,GAGHsD,EAAUgC,QAFZ5B,GADK,GACLA,SACAM,GAFK,GAELA,qBAGaV,KAAf,QCjNO,SAASiC,KACd,IAAM/F,EAAYxB,EAAeiG,GAC3Ba,EAAY9G,EAAeuG,GAC3BV,EAAmB7F,EAAeoG,GAClCoB,EAAYxH,EAAekH,IAC3BO,EAAyBzH,EAAeqG,GAGxCqB,EAAmB1H,EAAe0G,IAClCiB,EJlC4BC,cIoC5BC,EAAqB,SAACC,EAAwBC,GAClD,IAAMC,EACJP,GACAA,EAAuBxD,WAAa8D,EAAS9D,UAC7CwD,EAAuBtD,cAAgB4D,EAAS5D,YAE5C8D,EAAeH,EACjBE,EACElJ,IAAOoJ,mBACPpJ,IAAOqJ,kBACTrJ,IAAOsJ,qBAEX,OAAOC,IAAWvJ,IAAOwJ,WAAYL,IAiCvC,OACE,sBAAKpJ,UAAU,gBAAf,UACE,gCACE,gCACG2I,EAAU/E,KAAI,SAAC8F,EAAKtE,GAAN,OACb,6BACGsE,EAAI9F,KAAI,SAACqF,EAAQ3D,GAAT,OACP,qBAEEtF,UAAWgJ,EAAmBC,EAAQ,CAAE7D,WAAUE,gBAClDqE,QAAS,kBAxCH,SAACT,GAAsC,IAAD,EACpDU,EACJhB,GACAA,EAAuBxD,WAAa8D,EAAS9D,UAC7CwD,EAAuBtD,cAAgB4D,EAAS5D,YAE5CuE,EAAoBlB,EAAUO,EAAS9D,UAAU8D,EAAS5D,aAC1DwE,GAA0C,OAAjBD,QAAiB,IAAjBA,GAAA,UAAAA,EAAmB3J,aAAnB,eAA0Be,SAAUgH,EAE7D8B,EAA4B9E,EAAqCiE,GACjEc,EAAkBnB,EAAiBxE,MAAK,SAAAyC,GAAM,eAClD,UAAAA,EAAOxD,YAAP,eAAaG,QAASd,EAAU6D,6BAChC,UAAAM,EAAOxD,YAAP,eAAaC,MAAOwG,KAEhBE,EAAS,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAiB1G,KAE7BwD,EAEJmD,EACIpD,GAASoD,GAKP9C,GAHFyC,IAECE,EACsB,KACAZ,GAE7BJ,EAAShC,GAaoBoD,CAAc,CAAE9E,WAAUE,iBAH3C,UAKG2D,GAAUA,EAAO/I,OAChB,cAACa,EAAD,CACEE,MAAOgI,EAAO/I,MAAMe,MACpBC,KAAM+H,EAAO/I,MAAMgB,OAGvB,sBAAMlB,UAAWC,IAAOkK,YAAxB,SAAsClF,EAAqC,CAAEG,WAAUE,oBAXzF,WACYF,EADZ,aAC2BE,EAD3B,UAFJ,WAAcF,EAAd,aAoBN,yCAAY6C,GAAa,UACzB,+CAEGY,EAAiBjF,KAAI,SAAAkD,GAAM,kCAAQA,EAAOxD,YAAf,aAAQ,EAAaG,KAArB,6BAAiCqD,EAAOxD,YAAxC,aAAiC,EAAaC,OAAO6G,KAAK,SAExF,4CAA8B,OAAhBpD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjB,kBAAmB,a,MCxG1CsE,OARf,WACE,OACE,qBAAKrK,UAAU,MAAf,SACE,cAAC0I,GAAD,OCHO4B,GAAQC,YAAe,CAClCC,QAAS,CACPlD,KAAMmD,MCOUC,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBE7I5BC,EAAOC,QAAU,CAAC,WAAa,yBAAyB,kBAAoB,gCAAgC,qBAAuB,mCAAmC,mBAAqB,iCAAiC,YAAc,4B,kBCA1OD,EAAOC,QAAU,CAAC,MAAQ,wB","file":"static/js/main.7fe00749.chunk.js","sourcesContent":["import { ReactElement } from 'react';\nimport styles from './Piece.module.css';\n\nimport {\n  Color,\n  Piece as Props,\n  Rank\n} from './types';\n\n// TODO: This is kind of brittle to have these baked in. Use a webpack\n// loader so these can be stored as separate files for easier editing\n// and potentially additional optimizations can be applied.\nconst redMan = <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles.piece} viewBox=\"0 0 75 50.37\"><path d=\"M87.26,64.3C87.26,74.05,70.86,82,50.63,82S14,74.05,14,64.3V49.5H87.26Z\" transform=\"translate(-13 -32.08)\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.5\" cy=\"18.15\" rx=\"37\" ry=\"17.65\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/></svg>\nconst redKing = <svg xmlns=\"http://www.w3.org/2000/svg\"  className={styles.piece} viewBox=\"0 0 75.08 63.38\"><path d=\"M87.26,64.3C87.26,74.05,70.86,82,50.63,82S14,74.05,14,64.3V49.5H87.26Z\" transform=\"translate(-12.92 -19.07)\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.58\" cy=\"31.16\" rx=\"37\" ry=\"17.65\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/><path d=\"M87.19,51.29c0,9.75-16.4,17.65-36.63,17.65S13.92,61,13.92,51.29V36.49H87.19Z\" transform=\"translate(-12.92 -19.07)\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.5\" cy=\"18.15\" rx=\"37\" ry=\"17.65\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/></svg>\nconst whiteMan = <svg xmlns=\"http://www.w3.org/2000/svg\"  className={styles.piece} viewBox=\"0 0 75 50.37\"><path d=\"M87.26,64.3C87.26,74.05,70.86,82,50.63,82S14,74.05,14,64.3V49.5H87.26Z\" transform=\"translate(-13 -32.08)\" fill=\"#fff\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.5\" cy=\"18.15\" rx=\"37\" ry=\"17.65\" fill=\"#fff\" stroke=\"#000\" strokeMiterlimit=\"10\"/></svg>\nconst whiteKing = <svg xmlns=\"http://www.w3.org/2000/svg\"  className={styles.piece} viewBox=\"0 0 75.08 63.38\"><path d=\"M87.26,64.3C87.26,74.05,70.86,82,50.63,82S14,74.05,14,64.3V49.5H87.26Z\" transform=\"translate(-12.92 -19.07)\" fill=\"#fff\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.58\" cy=\"31.16\" rx=\"37\" ry=\"17.65\" fill=\"red\" stroke=\"#000\" strokeMiterlimit=\"10\"/><path d=\"M87.19,51.29c0,9.75-16.4,17.65-36.63,17.65S13.92,61,13.92,51.29V36.49H87.19Z\" transform=\"translate(-12.92 -19.07)\" fill=\"#fff\" stroke=\"#000\" strokeMiterlimit=\"10\"/><ellipse cx=\"37.5\" cy=\"18.15\" rx=\"37\" ry=\"17.65\" fill=\"#fff\" stroke=\"#000\" strokeMiterlimit=\"10\"/></svg>\n\ntype SvgLookup = Record<Color, Record<Rank, ReactElement>>\nconst svgLookup: SvgLookup = {\n  red: {\n    man: redMan,\n    king: redKing\n  },\n  white: {\n    man: whiteMan,\n    king: whiteKing\n  }\n};\n\nexport default function Piece(props: Props) {\n  return svgLookup[props.color][props.rank];\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n  Color,\n  Direction,\n  Piece,\n  Rank\n} from './types';\n\nexport const playingSquaresPerRow = 4;\nexport const numberOfRows = playingSquaresPerRow * 2;\nexport const playingSquaresCount = playingSquaresPerRow * numberOfRows;\nexport const maxPlayingSquareIndex = playingSquaresCount - 1;\n\nexport const red: Color = 'red';\nexport const white: Color = 'white';\nexport const man: Rank = 'man';\n\nexport const rm: Piece = { color: red, rank: man };\nexport const wm: Piece = { color: white, rank: man };\n\nexport const nw: Direction = 'nw';\nexport const ne: Direction = 'ne';\nexport const se: Direction = 'se';\nexport const sw: Direction = 'sw';\nexport const directions = [ nw, ne, se, sw ];\n\n// Parity is zero-indexed (even rows are 0th, 2nd, 4th, etc.)\n// NOTE: These offsets assume directional bounds have been checked.\n\nexport const evenRowPlayingSquareOffsets: Record<Direction, number> = {\n  nw: -4,\n  ne: -3,\n  se: 5,\n  sw: 4\n};\n\nexport const oddRowPlayingSquareOffsets: Record<Direction, number> = {\n  nw: -5,\n  ne: -4,\n  se: 4,\n  sw: 3\n};\n","import {\n  Color,\n  Direction,\n  GameState,\n  JumpMoveActionType,\n  MaybeMove,\n  Move,\n  MoveTypeAndDirection,\n  PhysicalLocation,\n  PlayerAction,\n  PlayerActionType,\n  PlayingSquaresState,\n  SimpleMoveActionType\n} from './types';\n\nimport {\n  directions,\n  evenRowPlayingSquareOffsets,\n  man,\n  maxPlayingSquareIndex,\n  ne,\n  numberOfRows,\n  nw,\n  oddRowPlayingSquareOffsets,\n  playingSquaresPerRow,\n  red,\n  se,\n  sw\n} from './constants';\n\n// Parity is zero-indexed (even rows are 0th, 2nd, 4th, etc.)\nexport const playingSquareIndexIsInEvenRow = (index: number): boolean => {\n  const rowIndex = Math.floor(index / playingSquaresPerRow);\n  return rowIndex % 2 === 0;\n}\n\nexport const directionIsInBounds = (originIndex: number, direction: Direction): boolean => {\n  const isNorth = direction === 'nw' || direction === 'ne';\n  if (\n    isNorth &&\n    originIndex < playingSquaresPerRow\n  ) {\n    return false;\n  }\n\n  const isSouth = direction === 'sw' || direction === 'se';\n  if (\n    isSouth &&\n    originIndex >= playingSquaresPerRow * (numberOfRows - 1)\n  ) {\n    return false;\n  }\n\n  const isInEvenRow = playingSquareIndexIsInEvenRow(originIndex);\n\n  const isWest = direction === 'nw' || direction === 'sw';\n  if (\n    isWest &&\n    !isInEvenRow &&\n    originIndex % playingSquaresPerRow === 0\n  ) {\n    return false;\n  }\n\n  const isEast = direction === 'ne' || direction === 'se';\n  if (\n    isEast &&\n    isInEvenRow &&\n    (originIndex + 1) % playingSquaresPerRow === 0\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const playingSquareIndexIsInBounds = (index: number): boolean =>\n  0 <= index &&\n  index <= maxPlayingSquareIndex;\n\nexport const getAdjacentPlayingSquareIndex = (originIndex: number, direction: Direction): number | null => {\n  if (!directionIsInBounds(originIndex, direction)) {\n    return null;\n  }\n  return playingSquareIndexIsInEvenRow(originIndex)\n    ? originIndex + evenRowPlayingSquareOffsets[direction]\n    : originIndex + oddRowPlayingSquareOffsets[direction];\n};\n\nexport const getJumpPlayingSquareIndex = (originIndex: number, direction: Direction): number | null => {\n  const adjacentIndex = getAdjacentPlayingSquareIndex(originIndex, direction);\n  return adjacentIndex === null\n    ? null\n    : getAdjacentPlayingSquareIndex(adjacentIndex, direction);\n};\n\nexport const getLastPlayerAction = (gameState: GameState): PlayerAction<PlayerActionType> | null =>\n  gameState.playerActions.slice(-1)[0] || null;\n\nexport const getCurrentPlayingSquaresState = (gameState: GameState): PlayingSquaresState => {\n  const lastPlayerAction = getLastPlayerAction(gameState);\n  return lastPlayerAction\n    ? lastPlayerAction.resultantPlayingSquaresState\n    : gameState.initialPlayingSquaresState;\n};\n\nexport const getPiecePlayingSquareIndicesForColor = (playingSquaresState: PlayingSquaresState, color: Color): number[] =>\n  playingSquaresState.reduce(\n    (indices, playingSquare, playingSquareIndex) =>\n      playingSquare &&\n      playingSquare.color === color\n        ? indices.concat(playingSquareIndex)\n        : indices,\n    [] as number[]\n  )\n\nexport const isJustAMove = (move: MaybeMove): move is Move =>\n  typeof move.to === 'number';\n\nexport const getMaybeSimpleMove = (originIndex: number, direction: Direction): MaybeMove => ({\n  from: originIndex,\n  to: getAdjacentPlayingSquareIndex(originIndex, direction)\n});\n\nexport const getPotentialSimpleMoves = (originIndex: number): Move[] =>\n  directions\n    .map(direction => getMaybeSimpleMove(originIndex, direction))\n    .filter(isJustAMove);\n\nexport const getAllLegalSimpleMoves = (playingSquaresState: PlayingSquaresState, color: Color): Move[] => {\n  const pieceIndicesForColor = getPiecePlayingSquareIndicesForColor(playingSquaresState, color);\n  const potentialSimpleMoves: Move[] = pieceIndicesForColor.reduce(\n    (potentials, originIndex) =>\n      potentials.concat(getPotentialSimpleMoves(originIndex)),\n    [] as Move[]\n  );\n  const legalSimpleMoves = potentialSimpleMoves.filter(move =>\n    isMoveLegal(playingSquaresState, move)\n  );\n  return legalSimpleMoves;\n};\n\nexport const getAllLegalJumpMoves = (playingSquaresState: PlayingSquaresState, color: Color): Move[] => {\n  const pieceIndicesForColor = getPiecePlayingSquareIndicesForColor(playingSquaresState, color);\n  const potentialJumpMoves: Move[] = pieceIndicesForColor.reduce(\n    (potentials, originIndex) =>\n      potentials.concat(getPotentialJumpMoves(originIndex)),\n    [] as Move[]\n  );\n  const legalJumpMoves = potentialJumpMoves.filter(move =>\n    isMoveLegal(playingSquaresState, move)\n  );\n  return legalJumpMoves;\n};\n\nexport const getMaybeJumpMove = (originIndex: number, direction: Direction): MaybeMove => ({\n  from: originIndex,\n  to: getJumpPlayingSquareIndex(originIndex, direction)\n});\n\nexport const getPotentialJumpMoves = (originIndex: number): Move[] =>\n  directions\n    .map(direction => getMaybeJumpMove(originIndex, direction))\n    .filter(isJustAMove);\n\nexport const getMoveTypeAndDirection = (move: Move): MoveTypeAndDirection | null => {\n  const simpleMoveDirection = directions.find(direction =>\n    getMaybeSimpleMove(move.from, direction).to === move.to\n  );\n  if (simpleMoveDirection) {\n    return {\n      direction: simpleMoveDirection,\n      type: 'simple move'\n    };\n  }\n  const jumpMoveDirection = directions.find(direction =>\n    getMaybeJumpMove(move.from, direction).to === move.to\n  );\n  if (jumpMoveDirection) {\n    return {\n      direction: jumpMoveDirection,\n      type: 'jump move'\n    }\n  }\n  return null;\n};\n\nexport const directionIsForward = (direction: Direction, color: Color): boolean =>\n  color === red\n    ? direction === sw || direction === se\n    : direction === nw || direction === ne;\n\nexport const isMoveLegal = (playingSquaresState: PlayingSquaresState, move: Move): boolean => {\n  const pieceAtOrigin = playingSquaresState[move.from];\n  const pieceAtDestination = playingSquaresState[move.to];\n\n  if (!pieceAtOrigin || pieceAtDestination) {\n    return false;\n  }\n\n  const moveTypeAndDirection = getMoveTypeAndDirection(move);\n\n  if (!moveTypeAndDirection) {\n    return false;\n  }\n\n  const { type, direction } = moveTypeAndDirection;\n\n  if (\n    pieceAtOrigin.rank === man &&\n    !directionIsForward(direction, pieceAtOrigin.color)\n  ) {\n    return false;\n  }\n\n  if (type === 'jump move') {\n    const jumpedIndex = getAdjacentPlayingSquareIndex(move.from, direction);\n    if (!jumpedIndex) {\n      return false;\n    }\n    const jumpedPiece = playingSquaresState[jumpedIndex];\n    if (\n      !jumpedPiece ||\n      jumpedPiece.color === pieceAtOrigin.color\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const indexIsInKingsRow = (index: number, color: Color): boolean =>\n  color === 'red'\n    ? maxPlayingSquareIndex - playingSquaresPerRow < index &&\n      index <= maxPlayingSquareIndex\n    : 0 <= index &&\n      index < playingSquaresPerRow;\n\nexport const physicalLocationToPlayingSquareIndex = (physical: PhysicalLocation): number | null => {\n  const rowIsEven = physical.rowIndex % 2 === 0;\n  const columnIsEven = physical.columnIndex % 2 === 0;\n  const isPlayingSquare =\n    (rowIsEven && !columnIsEven) ||\n    (!rowIsEven && columnIsEven);\n  if (!isPlayingSquare) {\n    return null;\n  }\n  const playingSquareColumn = rowIsEven\n    ? (physical.columnIndex - 1) / 2\n    : physical.columnIndex / 2;\n  return playingSquareColumn + physical.rowIndex * playingSquaresPerRow;\n};\n\nexport const playingSquareIndexToPhysicalLocation = (playingSquareIndex: number): PhysicalLocation | null => {\n  if (!playingSquareIndexIsInBounds(playingSquareIndex)) {\n    return null;\n  }\n\n  const rowIndex = Math.floor(playingSquareIndex / playingSquaresPerRow);\n  const columnIndex = playingSquareIndexIsInEvenRow(playingSquareIndex)\n    ? (playingSquareIndex % playingSquaresPerRow) * 2 + 1\n    : (playingSquareIndex % playingSquaresPerRow) * 2;\n\n  return { rowIndex, columnIndex };\n};\n\nexport const createSimpleMoveAction = (\n  playingSquaresState: PlayingSquaresState,\n  move: Move,\n  // This is optional because in most cases we should already have\n  // validated the move before creating an action from it\n  validate = true\n): PlayerAction<SimpleMoveActionType> => {\n  const pieceAtOrigin = playingSquaresState[move.from];\n  if (\n    !pieceAtOrigin || (\n      validate &&\n      !isMoveLegal(playingSquaresState, move)  \n    )\n  ) {\n    throw new Error('Illegal move');\n  }\n\n  const resultantPlayingSquaresState: PlayingSquaresState = [ ...playingSquaresState ];\n  resultantPlayingSquaresState[move.from] = null;\n  resultantPlayingSquaresState[move.to] = indexIsInKingsRow(move.to, pieceAtOrigin.color)\n    ? { ...pieceAtOrigin, rank: 'king' }\n    : pieceAtOrigin;\n\n  const opponentColor: Color = pieceAtOrigin.color === 'red'\n    ? 'white'\n    : 'red';\n\n  const remainingOpponentMoves = [\n    ...getAllLegalJumpMoves(resultantPlayingSquaresState, opponentColor),\n    ...getAllLegalSimpleMoves(resultantPlayingSquaresState, opponentColor)\n  ];\n\n  const opponentHasNoRemainingMoves = remainingOpponentMoves.length === 0;\n\n  const resultantWinner = opponentHasNoRemainingMoves\n    ? pieceAtOrigin.color\n    : null;\n\n  return {\n    type: 'simple move',\n    color: pieceAtOrigin.color,\n    move,\n    resultantPlayingSquaresState,\n    // Only jump moves can perpetuate a turn\n    endsTurn: true,\n    endsGame: opponentHasNoRemainingMoves,\n    resultantWinner\n  }\n};\n\nexport const createJumpMoveAction = (\n  playingSquaresState: PlayingSquaresState,\n  move: Move,\n  // This is optional because in most cases we should already have\n  // validated the move before creating an action from it\n  validate = true\n): PlayerAction<JumpMoveActionType> => {\n  const pieceAtOrigin = playingSquaresState[move.from];\n  const moveTypeAndDirection = getMoveTypeAndDirection(move);\n  if (\n    !pieceAtOrigin ||\n    !moveTypeAndDirection || (\n      validate &&\n      !isMoveLegal(playingSquaresState, move)  \n    )\n  ) {\n    throw new Error('Illegal move');\n  }\n\n  const { direction } = moveTypeAndDirection;\n  const jumpedIndex = getAdjacentPlayingSquareIndex(move.from, direction) as number;\n  const resultantPlayingSquaresState: PlayingSquaresState = [ ...playingSquaresState ];\n  resultantPlayingSquaresState[move.from] = null;\n\n  const isPromotion = indexIsInKingsRow(move.to, pieceAtOrigin.color)\n  resultantPlayingSquaresState[move.to] = isPromotion\n    ? { ...pieceAtOrigin, rank: 'king' }\n    : pieceAtOrigin;\n\n  resultantPlayingSquaresState[jumpedIndex] = null;\n  const nextJumpsForPiece = getAllLegalJumpMoves(resultantPlayingSquaresState, pieceAtOrigin.color)\n    .filter(nextJump => nextJump.from === move.to)\n\n  const endsTurn = isPromotion || !nextJumpsForPiece.length;\n\n  const opponentColor: Color = pieceAtOrigin.color === 'red'\n    ? 'white'\n    : 'red';\n\n  const remainingOpponentMoves = [\n    ...getAllLegalJumpMoves(resultantPlayingSquaresState, opponentColor),\n    ...getAllLegalSimpleMoves(resultantPlayingSquaresState, opponentColor)\n  ];\n\n  const opponentHasNoRemainingMoves = remainingOpponentMoves.length === 0;\n  const endsGame = endsTurn && opponentHasNoRemainingMoves;\n  const resultantWinner = endsGame\n    ? pieceAtOrigin.color\n    : null;\n\n  return {\n    type: 'jump move',\n    color: pieceAtOrigin.color,\n    move,\n    resultantPlayingSquaresState,\n    endsTurn,\n    endsGame,\n    resultantWinner\n  }\n};\n","import {\n  createSlice,\n  createSelector,\n  PayloadAction\n} from '@reduxjs/toolkit';\n\nimport {\n  Color,\n  GameState,\n  JumpMoveActionType,\n  Move,\n  MoveActionType,\n  PhysicalBoardState,\n  PhysicalLocation,\n  PlayerAction,\n  PlayerActionType\n} from './types';\n\nimport { RootState } from '../../app/store';\n\nimport {\n  rm,\n  playingSquaresPerRow,\n  wm,\n  red,\n  white\n} from './constants';\n\nimport {\n  createJumpMoveAction,\n  createSimpleMoveAction,\n  getAllLegalJumpMoves,\n  getAllLegalSimpleMoves,\n  getCurrentPlayingSquaresState,\n  getLastPlayerAction,\n  getMoveTypeAndDirection,\n  getPiecePlayingSquareIndicesForColor,\n  physicalLocationToPlayingSquareIndex,\n  playingSquareIndexToPhysicalLocation\n} from './utilities';\n\n\n/**\n * Initial state & reducers\n */\n\nconst initialState: GameState = {\n  initialPlayingSquaresState: [\n      rm, rm, rm, rm,\n    rm, rm, rm, rm,\n      rm, rm, rm, rm,\n    null, null, null, null,\n      null, null, null, null,\n    wm, wm, wm, wm,\n      wm, wm, wm, wm,\n    wm, wm, wm, wm\n  ],\n  playerActions: [],\n  selectedPlayingSquareIndex: null\n}\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    makeMove: (gameState: GameState, action: PayloadAction<Move>) => {\n      const move = action.payload;\n      const moveTypeAndDirection = getMoveTypeAndDirection(move);\n\n      if (!moveTypeAndDirection) {\n        throw new Error('Illegal move');\n      }\n\n      // For the benefit of type inference\n      const jumpMove: JumpMoveActionType = 'jump move';\n      const playingSquaresState = getCurrentPlayingSquaresState(gameState);\n      const playerAction = moveTypeAndDirection.type === jumpMove\n        ? createJumpMoveAction(playingSquaresState, move)\n        : createSimpleMoveAction(playingSquaresState, move);\n\n      return {\n        ...gameState,\n        playerActions: [\n          ...gameState.playerActions,\n          playerAction\n        ],\n        selectedPlayingSquareIndex: null\n      };\n    },\n    selectPhysicalSquare(gameState: GameState, action: PayloadAction<PhysicalLocation | null>) {\n      return {\n        ...gameState,\n        selectedPlayingSquareIndex: action.payload\n          ? physicalLocationToPlayingSquareIndex(action.payload)\n          : null\n      };\n    }\n  }\n});\n\n\n/**\n * Selectors\n */\n\nexport const selectGameState = (state: RootState): GameState => state.game;\n\nexport const selectLastPlayerAction = (state: RootState): PlayerAction<PlayerActionType> | null =>\n  getLastPlayerAction(state.game);\n\nexport const selectLastMovePlayerAction = (state: RootState): PlayerAction<MoveActionType> | null => {\n  const moveActions = state.game.playerActions.filter(action =>\n    action.type === 'simple move' ||\n    action.type === 'jump move'\n  ) as PlayerAction<MoveActionType>[];\n  return moveActions.slice(-1)[0] || null;\n};\n\nexport const selectPlayerColor = (_: RootState, playerColor: Color): Color =>\n  playerColor;\n\nexport const selectSelectedPhysicalLocation = (state: RootState): PhysicalLocation | null =>\n  typeof state.game.selectedPlayingSquareIndex === 'number'\n    ? playingSquareIndexToPhysicalLocation(state.game.selectedPlayingSquareIndex)\n    : null;\n\nexport const selectGameOver = createSelector(\n  [ selectLastPlayerAction ],\n  lastPlayerAction => lastPlayerAction\n    ? lastPlayerAction.endsGame\n    : false\n);\n\nexport const selectWhoseTurn = createSelector(\n  [ selectLastPlayerAction ],\n  lastPlayerAction => {\n    if (!lastPlayerAction) {\n      return red;\n    }\n    if (lastPlayerAction.endsGame) {\n      return null;\n    }\n    if (lastPlayerAction.endsTurn) {\n      return lastPlayerAction.color === red\n        ? white\n        : red;\n    }\n    return lastPlayerAction.color;\n  }\n);\n\nexport const selectCurrentPlayingSquaresState = createSelector(\n  [ selectGameState, selectLastPlayerAction ],\n  (gameState, lastPlayerAction) => lastPlayerAction\n    ? lastPlayerAction.resultantPlayingSquaresState\n    : gameState.initialPlayingSquaresState\n);\n\nexport const selectCaptureCountByPlayer = createSelector(\n  [ selectGameState, selectPlayerColor ],\n  (gameState, playerColor) => gameState.playerActions.reduce(\n    (count, action) =>\n      action.type === 'jump move' &&\n      action.color === playerColor\n        ? count + 1\n        : count,\n    0\n  )\n);\n\nexport const selectCurrentPlayerBoardIndices = createSelector(\n  [ selectCurrentPlayingSquaresState, selectWhoseTurn ],\n  (playingSquaresState, whoseTurn) =>\n    whoseTurn\n      ? getPiecePlayingSquareIndicesForColor(playingSquaresState, whoseTurn)\n      : []\n);\n\nexport const selectCurrentValidMoveActions = createSelector(\n  [ selectWhoseTurn, selectLastMovePlayerAction, selectCurrentPlayingSquaresState ],\n  (whoseTurn, lastMoveAction, playingSquaresState) => {\n    if (!whoseTurn) {\n      return [];\n    }\n\n    const isStartOfMultiJump =\n      lastMoveAction?.color === whoseTurn &&\n      lastMoveAction?.type === 'jump move';\n\n    const legalJumpMoves = getAllLegalJumpMoves(playingSquaresState, whoseTurn);\n    const legalJumpMoveActions = legalJumpMoves\n      .filter(move =>\n        isStartOfMultiJump\n          ? lastMoveAction?.move?.to === move.from\n          : move\n      )\n      .map(move =>\n        createJumpMoveAction(playingSquaresState, move, false)\n      );\n\n    // Jumping is mandatory:\n    // https://en.wikipedia.org/wiki/English_draughts#Move_rules\n    if (legalJumpMoveActions.length) {\n      return legalJumpMoveActions;\n    }\n\n    const legalSimpleMoves = getAllLegalSimpleMoves(playingSquaresState, whoseTurn);\n    const legalSimpleMoveActions = legalSimpleMoves.map(move =>\n      createSimpleMoveAction(playingSquaresState, move, false)\n    );\n\n    return legalSimpleMoveActions;\n  }\n);\n\nexport const selectCurrentPhysicalBoardState = createSelector(\n  [ selectCurrentPlayingSquaresState ],\n  (playingSquaresState) => {\n    const rows: PhysicalBoardState = Array.from({ length: playingSquaresPerRow * 2 }, (_, physicalRowIndex) =>\n      Array.from({ length: playingSquaresPerRow * 2 }, (_, physicalColumnIndex) => {\n        const playingSquareIndex = physicalLocationToPlayingSquareIndex({\n          rowIndex: physicalRowIndex,\n          columnIndex: physicalColumnIndex\n        });\n        return playingSquareIndex !== null\n          ? { playingSquareIndex, piece: playingSquaresState[playingSquareIndex] }\n          : null;\n      })\n    );\n    return rows;\n  }\n);\n\nexport const {\n  makeMove,\n  selectPhysicalSquare\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import classNames from 'classnames';\nimport Piece from './Piece';\nimport styles from './Game.module.css';\n\nimport {\n  JumpMoveActionType,\n  PhysicalLocation,\n  PhysicalSquare,\n  PlayerAction,\n  SimpleMoveActionType\n} from './types';\n\nimport {\n  useAppSelector,\n  useAppDispatch\n} from '../../app/hooks';\n\nimport {\n  selectPhysicalSquare,\n  selectCurrentPhysicalBoardState,\n  selectSelectedPhysicalLocation,\n  selectWhoseTurn,\n  selectCurrentValidMoveActions,\n  selectGameState,\n  makeMove,\n  selectLastPlayerAction\n} from './gameSlice';\nimport { physicalLocationToPlayingSquareIndex } from './utilities';\n\nexport function Game() {\n  const gameState = useAppSelector(selectGameState);\n  const whoseTurn = useAppSelector(selectWhoseTurn);\n  const lastPlayerAction = useAppSelector(selectLastPlayerAction);\n  const boardRows = useAppSelector(selectCurrentPhysicalBoardState);\n  const selectedPhysicalSquare = useAppSelector(selectSelectedPhysicalLocation);\n  // Have to do some modest type widening to make\n  // `validMoveActions.find()` callable\n  const validMoveActions = useAppSelector(selectCurrentValidMoveActions) as Array<PlayerAction<SimpleMoveActionType | JumpMoveActionType>>;\n  const dispatch = useAppDispatch();\n\n  const getSquareClassName = (square: PhysicalSquare, location: PhysicalLocation): string => {\n    const isSelected =\n      selectedPhysicalSquare &&\n      selectedPhysicalSquare.rowIndex === location.rowIndex &&\n      selectedPhysicalSquare.columnIndex === location.columnIndex;\n\n    const variantStyle = square\n      ? isSelected\n        ? styles.gameSquareSelected\n        : styles.gameSquarePlaying\n      : styles.gameSquareNonPlaying;\n\n    return classNames(styles.gameSquare, variantStyle);\n  };\n\n  const onSquareClick = (location: PhysicalLocation): void => {\n    const isAlreadySelected =\n      selectedPhysicalSquare &&\n      selectedPhysicalSquare.rowIndex === location.rowIndex &&\n      selectedPhysicalSquare.columnIndex === location.columnIndex;\n\n    const newSelectedSquare = boardRows[location.rowIndex][location.columnIndex];\n    const isPieceOfCurrentPlayer = newSelectedSquare?.piece?.color === whoseTurn;\n\n    const clickedPlayingSquareIndex = physicalLocationToPlayingSquareIndex(location);\n    const validMoveAction = validMoveActions.find(action =>\n      action.move?.from === gameState.selectedPlayingSquareIndex &&\n      action.move?.to === clickedPlayingSquareIndex\n    );\n    const validMove = validMoveAction?.move;\n\n    const action = \n      // Click from a valid square to a valid destination to make a move\n      validMove\n        ? makeMove(validMove)\n        // Click twice to de-select\n        : isAlreadySelected ||\n          // Click anything but a piece of the current player to de-select\n          !isPieceOfCurrentPlayer\n          ? selectPhysicalSquare(null)\n          : selectPhysicalSquare(location);\n\n    dispatch(action);\n  };\n\n  return (\n    <div className=\"{styles.game}\">\n      <table>\n        <tbody>\n          {boardRows.map((row, rowIndex) =>\n            <tr key={`[${ rowIndex }]`}>\n              {row.map((square, columnIndex) =>\n                <td\n                  key={`[${ rowIndex }][${ columnIndex }]`}\n                  className={getSquareClassName(square, { rowIndex, columnIndex })}\n                  onClick={() => onSquareClick({ rowIndex, columnIndex })}\n                >\n                  {square && square.piece &&\n                    <Piece\n                      color={square.piece.color}\n                      rank={square.piece.rank}\n                    />\n                  }\n                  <span className={styles.squareIndex}>{physicalLocationToPlayingSquareIndex({ rowIndex, columnIndex })}</span>\n                </td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <div>Turn: {whoseTurn || 'none'}</div>\n      <div>\n        Valid moves:\n        {validMoveActions.map(action => `${ action.move?.from } → ${ action.move?.to }`).join(', ')}\n      </div>\n      <div>Winner: {lastPlayerAction?.resultantWinner || 'none'}</div>\n    </div>\n  );\n}\n","import { Game } from './features/game/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport gameReducer from '../features/game/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameSquare\":\"Game_gameSquare__1dGwF\",\"gameSquarePlaying\":\"Game_gameSquarePlaying__3yjtI\",\"gameSquareNonPlaying\":\"Game_gameSquareNonPlaying__taBs7\",\"gameSquareSelected\":\"Game_gameSquareSelected__2l6KE\",\"squareIndex\":\"Game_squareIndex__1-u-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"piece\":\"Piece_piece__2pkac\"};"],"sourceRoot":""}